@using static Capital.GSG.FX.Data.Core.OrderData.OrderStatusCode;
@using Capital.GSG.FX.Data.Core.FinancialAdvisorsData;

@model StratedgemeMonitor.Models.Orders.OrderModel

    @{
        ViewBag.Title = Model.ToString();
    }

<div class="row">
    <div class="col-xs-12" id="alertholder">
    </div>
</div>

    <div class="row">
        <div class="col-lg-6">
            <div class="@(Model.Status == Filled ? "panel panel-success" : (Model.Status == Cancelled || Model.Status == ApiCanceled) ? "panel panel-danger" : "panel panel-default")">
                <div class="panel-heading">
                    <h2>
                        @if (Model.IsVirtual)
                        {
                            <span class="label label-warning">@Html.DisplayNameFor(m => Model.IsVirtual)</span>
                        }
                        @Model.ToString() <small>(@Html.DisplayFor(m => m.PermanentId))</small>
                    </h2>
                </div>
                <div class="panel-body">
                    <dl class="dl-horizontal">
                        <dt>@Html.DisplayNameFor(m => Model.Broker)</dt>
                        <dd>@Html.DisplayFor(m => Model.Broker)</dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Cross)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Cross)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.FillPrice)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.FillPrice)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.OrderId)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.OrderId)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Origin)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Origin)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.PermanentId)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.PermanentId)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.PlacedTime)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.PlacedTime)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Quantity)
                        </dt>

                        @if (Model.UsdQuantity.HasValue && Model.UsdQuantity.Value / 1000 != Model.Quantity)
                        {
                            <dd>
                                @Html.DisplayFor(model => model.Quantity) <small>(@Html.DisplayFor(m => Model.UsdQuantity) USD)</small>
                            </dd>
                        }
                        else
                        {
                            <dd>
                                @Html.DisplayFor(model => model.Quantity)
                            </dd>
                        }

                        <dt>
                            @Html.DisplayNameFor(model => model.Side)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Side)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Status)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Status)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Type)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Type)
                        </dd>
                        <dt>
                            @Html.DisplayNameFor(model => model.Strategy)
                        </dt>
                        <dd>
                            @Html.DisplayFor(model => model.Strategy)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.EstimatedCommission)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.EstimatedCommission) @Html.DisplayFor(model => model.EstimatedCommissionCcy)
                        </dd>
                        <dt>
                            @Html.DisplayNameFor(model => model.LastAsk)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.LastAsk)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.LastBid)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.LastBid)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.LastMid)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.LastMid)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.LastUpdateTime)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.LastUpdateTime)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.LimitPrice)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.LimitPrice)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.OurRef)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.OurRef)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.ParentOrderId)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.ParentOrderId)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.StopPrice)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.StopPrice)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.TimeInForce)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.TimeInForce)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.TrailingAmount)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.TrailingAmount)
                        </dd>
                    </dl>
                </div>
                <div class="panel-footer">
                    <div class="btn-group">
                        <a class="btn btn-primary" asp-action="Index">Back</a>
                        @if (Model.Status == Submitted || Model.Status == PreSubmitted)
                        {
                            <button class="btn btn-danger" data-toggle="modal" data-target="#warningModal" data-goal="inactivate" data-broker="@Model.Broker" data-permanent-id="@Model.PermanentId">Mark Inactive</button>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4>Allocations</h4>
                </div>
                <div class="panel-body">
                    @if (Model.AllocationInfo is FAAllocationProfile)
                    {
                        <dl class="dl-horizontal">
                            <dt>Allocation Profile</dt>
                            <dd>@Html.DisplayFor(m => ((FAAllocationProfile)Model.AllocationInfo).Name)</dd>

                            <dt>Type</dt>
                            <dd>@Html.DisplayFor(m => ((FAAllocationProfile)Model.AllocationInfo).Type)</dd>

                            <dt>Accounts</dt>
                            <dd>
                                @foreach (var allocation in ((FAAllocationProfile)Model.AllocationInfo).Allocations)
                                {
                                    @($"{allocation.Account}:\t{allocation.Amount:N0}")<br />
                                }
                            </dd>
                        </dl>
                    }
                    else if (Model.AllocationInfo is FAGroup)
                    {
                        <dl>
                            <dt>FA Group</dt>
                            <dd>@Html.DisplayFor(m => ((FAGroup)Model.AllocationInfo).Name)</dd>

                            <dt>Method</dt>
                            <dd>@Html.DisplayFor(m => ((FAGroup)Model.AllocationInfo).DefaultMethod)</dd>

                            <dt>Accounts</dt>
                            <dd>
                                @foreach (var account in ((FAGroup)Model.AllocationInfo).Accounts)
                                {
                                    @Html.DisplayFor(m => account)<br />
                                }
                            </dd>
                        </dl>
                    }
                    else
                    {
                        <p>@Html.DisplayFor(m => Model.AllocationInfoStr)</p>
                    }
                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4>History</h4>
                </div>
                @if (Model.History.Count > 0)
                {
                    <table class="table table-condensed">
                        @foreach (var point in Model.History)
                        {
                            <tr>
                                <td>@Html.DisplayFor(p => point.Timestamp)</td>
                                <td>@Html.DisplayFor(p => point.Status)</td>
                                <td>@Html.DisplayFor(p => point.Message)</td>
                            </tr>
                        }
                    </table>
                }
                else
                {
                    <div class="panel-body">
                        <p>No history point recorder for this order</p>
                    </div>
                }
            </div>
        </div>
    </div>

<!-- Modals -->
<div class="modal fade" id="warningModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Warning</h4>
            </div>
            <div class="modal-body">

            </div>
            <div class="modal-footer">
                <div class="btn-group">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                    <button id="btn-proceed" type="button" class="btn btn-danger" data-dismiss="modal">Proceed</button>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- End Modals -->

@section Scripts
{
    <script>
        function markAsInactive(broker, permanentId) {
            $.ajax({
                type: 'GET',
                url: '/api/orders/inactivate/' + broker + '/' + permanentId,
                success: function (data) {
                    console.log(data);
                    if (data.success) {
                        location.reload();
                        showBootstrapAlert('success', data.message || 'Successfully marked order ' + permanentId + ' as inactive');
                    }
                    else {
                        showBootstrapAlert('danger', data.message || 'Failed to mark order ' + permanentId + ' as inactive');
                    }
                }
            });
        }

        $(document).ready(function () {
            $('#warningModal').on('show.bs.modal', function (event) {
                // Get the button that triggered the modal
                var button = $(event.relatedTarget);

                // Extract value from data-* attributes
                var broker = button.data('broker');
                var permanentId = button.data('permanent-id');

                var goal = button.data('goal');

                if (goal === 'inactivate') {
                    $(this).find('.modal-body').text('Request to mark order ' + broker + '-' + permanentId + ' as inactive?');

                    $('#btn-proceed').click(function () {
                        markAsInactive(broker, permanentId);

                        $('#btn-proceed').off('click'); // necessary to remove the event handler otherwise it might get called again by another popup
                    });
                } else {
                    console.error('Invalid goal ' + goal);
                }
            });
        });
    </script>
}